name: Poll Telegram for Commands

on:
  schedule:
    - cron: '* * * * *'
  workflow_dispatch:

jobs:
  poll:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download last_offset.txt
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: telegram-offset
          path: .

      - name: Load Offset
        id: load
        run: |
          if [ -f "last_offset.txt" ]; then
            OFFSET=$(cat last_offset.txt)
            echo "Loaded offset: $OFFSET"
          else
            OFFSET=0
            echo "No offset file, starting from 0"
          fi
          echo "offset=$OFFSET" >> $GITHUB_OUTPUT

      - name: Get Updates
        id: updates
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        run: |
          OFFSET=${{ steps.load.outputs.offset }}
          UPDATES=$(curl -s "https://api.telegram.org/bot$TG_BOT_TOKEN/getUpdates?offset=$OFFSET&limit=20")
          echo "updates<<EOF" >> $GITHUB_OUTPUT
          echo "$UPDATES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          MAX_ID=$(echo "$UPDATES" | jq -r '.result[].update_id' | sort -nr | head -1)
          if [ "$MAX_ID" != "null" ] && [ -n "$MAX_ID" ]; then
            echo "new_offset=$((MAX_ID + 1))" >> $GITHUB_ENV
          else
            echo "new_offset=$OFFSET" >> $GITHUB_ENV
          fi

      - name: Save Offset to Artifact
        if: always()
        run: |
          echo "${{ env.new_offset }}" > last_offset.txt
          echo "Saved new offset: ${{ env.new_offset }}"

      - name: Upload Offset Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: telegram-offset
          path: last_offset.txt
          retention-days: 1

      - name: Respond to /start
        if: contains(steps.updates.outputs.updates, '/start')
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
            -d chat_id="$TG_CHAT_ID" \
            -d text="Bot 已就绪！发 /retry 触发任务" \
            -d parse_mode="Markdown"

      - name: Trigger on /retry
        if: contains(steps.updates.outputs.updates, '/retry')
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/wispbyte-auto-login.yml/dispatches \
            -d '{"ref":"main"}')
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" = "204" ]; then
            curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
              -d chat_id="$TG_CHAT_ID" \
              -d text="Workflow 已触发重试！"
          else
            curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
              -d chat_id="$TG_CHAT_ID" \
              -d text="触发失败：HTTP $HTTP_CODE"
          fi
